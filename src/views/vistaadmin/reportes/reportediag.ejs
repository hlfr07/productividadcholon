<!DOCTYPE html>
<html lang="en">

<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>REPORTES
    </title>
    <link rel="shortcut icon" type="image/x-icon" href="/src/views/img/icono.ico">
    <!-- Custom fonts for this template-->
    <link href="/src/boostrapdiseñoadmin/vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
    <link
        href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i"
        rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- SweetAlert2 CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10.16.6/dist/sweetalert2.min.css">

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <!-- Custom styles for this template-->
    <link href="/src/boostrapdiseñoadmin/css/sb-admin-2.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/src/views/css/registrar.css">
    <link rel="stylesheet" href="/src/views/css/estiloperfiles.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
        integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mammoth/1.4.2/mammoth.browser.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>

</head>

<body id="page-top">
    <style>
        .contenedor-flex {
            display: flex;
            flex-direction: row;
        }

        canvas {
            border: 1px solid #888888;
            margin: 1px;
            width: 10px;
            height: 60px;
        }
    </style>
    <!-- Page Wrapper -->
    <div id="wrapper">

        <!-- Sidebar -->
        <%- include('../plantilla/listamodulos') %>
            <!-- End of Sidebar -->

            <!-- Content Wrapper -->
            <div id="content-wrapper" class="d-flex flex-column">

                <!-- Main Content -->
                <div id="content">

                    <!-- Topbar -->
                    <%- include('../plantilla/navbar') %>
                        <!-- End of Topbar -->

                        <div class="col-md-12">
                            <div class="input-group mb-3 d-flex justify-content-center">
                                <h2 class="text-center">VISUALIZAR REPORTES</h2>
                            </div>
                        </div>

                        <div class="row justify-content-end">
                            <div class="col-md-4">
                                <input type="text" class="form-control" id="busqueda"
                                    placeholder="  🔍︎    Buscar Reporte..."
                                    oninput="this.value = this.value.toUpperCase()">
                            </div>
                        </div>


                        <div class="container-fluid overflow-auto">
                            <form class="row g-3">
                                <div class="col-auto">
                                    <label for="startDate">Fecha de inicio:</label>
                                    <select id="startDate" class="form-control" name="idunidad">
                                        <option value="">FECHA INICIO</option>
                                        <% fechas.forEach(function(fecha) { %>
                                            <option value="<%= new Date(fecha.fecha).toLocaleDateString('es-ES', { day: '2-digit' ,
                      month: '2-digit' , year: '2-digit' }) %>">
                                                <%= new Date(fecha.fecha).toLocaleDateString('es-ES', { day: '2-digit' ,
                                                    month: '2-digit' , year: '2-digit' }) %>
                                            </option>
                                            <% }); %>
                                    </select>
                                </div>
                                <div class="col-auto">
                                    <label for="endDate">Fecha de fin:</label>
                                    <select id="endDate" class="form-control" name="idunidad">
                                        <option value="">FECHA FIN</option>
                                        <% fechas.forEach(function(fecha) { %>
                                            <option value="<%= new Date(fecha.fecha).toLocaleDateString('es-ES', { day: '2-digit' ,
                      month: '2-digit' , year: '2-digit' }) %>">
                                                <%= new Date(fecha.fecha).toLocaleDateString('es-ES', { day: '2-digit' ,
                                                    month: '2-digit' , year: '2-digit' }) %>
                                            </option>
                                            <% }); %>
                                    </select>
                                </div>
                                <div class="col-auto">
                                    <button class="btn btn-brown mt-3" type="button" onclick="exportToExcel()">Exportar
                                        a Excel <i class="bi bi-file-earmark-bar-graph"></i></button>
                                </div>
                            </form>
                            <div class="custom-select-container mt-3">
                                <select id="selectOption"
                                    class="custom-select custom-select-sm form-control form-control-sm custom-short-select"
                                    style="width: auto;">
                                    <option value="10">10</option>
                                    <option value="25">25</option>
                                    <option value="50">50</option>
                                    <option value="100">100</option>
                                </select>
                            </div>

                            <table id="tablaResultados" class="table table-striped table-bordered">
                                <thead>
                                    <tr>
                                        <th>FECHA LLEGADA</th>
                                        <th>GALPON</th>
                                        <th>DESCRIPCION</th>
                                        <th>RECETA</th>
                                        <th>FECHA DE CONTROL</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% galpon.forEach(function(controlgalpon) { %>
                                        <tr>
                                            <td>
                                                <%= new Date(controlgalpon.fechaentrada).toLocaleDateString('es-ES', {
                                                    day: '2-digit' , month: '2-digit' , year: '2-digit' }) %>
                                            </td>
                                            <td>
                                                <%= controlgalpon.nombregalpon %>
                                            </td>
                                            <td>
                                                <%= controlgalpon.descripcion %>
                                            </td>
                                            <td>
                                                <%= controlgalpon.receta %>
                                            </td>
                                            <td>
                                                <%= new Date(controlgalpon.fecha).toLocaleDateString('es-ES', {
                                                    day: '2-digit' , month: '2-digit' , year: '2-digit' }) %>
                                            </td>
                                        </tr>
                                        <% }); %>
                                </tbody>
                            </table>
                            <nav aria-label="Page navigation example">
                                <ul class="pagination justify-content-end">
                                    <li class="page-item disabled">
                                        <a class="page-link">Atras</a>
                                    </li>
                                    <li class="page-item">
                                        <a class="page-link" href="#">Siguiente</a>
                                    </li>
                                </ul>
                            </nav>

                            <footer class="sticky-footer bg-white">
                                <div class="container my-auto">
                                    <div class="copyright text-center my-auto">
                                        <span>Copyright &copy; UNSM 2023</span>
                                    </div>
                                </div>
                            </footer>
                        </div>

                </div>
                <!-- End of Main Content -->

                <!-- Footer -->

                <!-- End of Footer -->

            </div>
            <!-- End of Content Wrapper -->

    </div>
    <!-- End of Page Wrapper -->

    <!-- Scroll to Top Button-->
    <a class="scroll-to-top rounded" href="#page-top">
        <i class="fas fa-angle-up"></i>
    </a>

    <!-- Logout Modal-->
    <div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
        aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Ready to Leave?</h5>
                    <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">Select "Logout" below if you are ready to end your current session.</div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
                    <a class="btn btn-primary" href="login.html">Logout</a>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.debug.js"></script>
    <script src="https://html2canvas.hertzen.com/dist/html2canvas.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.0/xlsx.full.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const startDateSelect = document.getElementById('startDate');
            const endDateSelect = document.getElementById('endDate');

            startDateSelect.addEventListener('change', function () {
                const selectedStartDate = parseDate(this.value);

                // Limpiar las opciones de fecha de fin
                while (endDateSelect.firstChild) {
                    endDateSelect.removeChild(endDateSelect.firstChild);
                }

                // Filtrar y agregar opciones válidas para la fecha de fin
                Array.from(startDateSelect.options).forEach(option => {
                    const optionDate = parseDate(option.value);
                    if (optionDate >= selectedStartDate) {
                        const newOption = option.cloneNode(true);
                        endDateSelect.appendChild(newOption);
                    }
                });

                // Hacer que la fecha de fin por defecto sea la misma que la fecha de inicio seleccionada
                endDateSelect.value = this.value;
            });
        });

        function parseDate(dateString) {
            const [day, month, year] = dateString.split('/').map(Number);
            return new Date(year, month - 1, day);
        }
        // Excel Export function
        function exportToExcel() {
            const startDate1 = document.getElementById('startDate').value;
            const endDate1 = document.getElementById('endDate').value;
            const startDate = parseDate(document.getElementById('startDate').value);
            const endDate = parseDate(document.getElementById('endDate').value);

            if (!startDate1 || !endDate1 || startDate1 > endDate1) {
                Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "Por favor, seleccione un rango de fechas válido!",
                });
                return;
            }

            const table = document.getElementById('tablaResultados');
            const filteredRows = Array.from(table.querySelectorAll('tbody tr')).filter(row => {
                const dateCell = row.cells[4]; // Asume que la fecha está en la cplumna 7
                const dateText = dateCell.textContent.trim();
                const date = parseDate(dateText);
                return date >= startDate && date <= endDate;
            });

            const wb = XLSX.utils.book_new();
            const ws = XLSX.utils.aoa_to_sheet([
                ["FECHA LLEGADA", "GALPON", "CANTIDAD", "PRODUCTO", "MORTALIDAD", "DESCRIPCION", "FECHA DE CONTROL"],
                ...filteredRows.map(row => Array.from(row.cells).map(cell => cell.textContent.trim()))
            ]);

            XLSX.utils.book_append_sheet(wb, ws, "Sheet1");
            // Formato del nombre del archivo con el rango de fechas
            const fileName = `reportediagnostico_${startDate1.replace(/\//g, '-')}_to_${endDate1.replace(/\//g, '-')}.xlsx`;

            XLSX.writeFile(wb, fileName);
        }
    </script>
    <script>

        const datosDesdeBD = [
  <% galpon.forEach(function (controlgalpon) { %>
        {
            idcontrolgalpon: '<%= controlgalpon.nombregalpon %>',
            fecha: '<%= controlgalpon.fechallegada %>',
            total: <%= controlgalpon.cantidadpollo %>,
            mortalidadpollos: <%= controlgalpon.mortalidadpollos %>,
        },
  <% }) %>
];

        const comprasNormales = datosDesdeBD.filter(controlgalpon => controlgalpon.estadocontrolgalpon = 1);

        const agruparDatosPorMesYControl = (comprasNormales) => {
            const datosAgrupados = {};

            comprasNormales.forEach(entry => {
                const fecha = new Date(entry.fecha);
                const mesAnioKey = `${fecha.getMonth() + 1}-${fecha.getFullYear()}`;

                if (!datosAgrupados[entry.idcontrolgalpon]) {
                    datosAgrupados[entry.idcontrolgalpon] = {
                        color: getRandomColor(),
                        data: {}
                    };
                }

                if (!datosAgrupados[entry.idcontrolgalpon].data[mesAnioKey]) {
                    datosAgrupados[entry.idcontrolgalpon].data[mesAnioKey] = { total: 0, mortalidadpollos: 0 };
                }

                datosAgrupados[entry.idcontrolgalpon].data[mesAnioKey].total += entry.total;
                datosAgrupados[entry.idcontrolgalpon].data[mesAnioKey].mortalidadpollos += entry.mortalidadpollos;
            });

            return Object.keys(datosAgrupados).map(idcontrolgalpon => ({
                idcontrolgalpon: idcontrolgalpon,
                color: datosAgrupados[idcontrolgalpon].color,
                datosMensuales: Object.keys(datosAgrupados[idcontrolgalpon].data).map(mesAnioKey => ({
                    mesAnio: mesAnioKey,
                    total: datosAgrupados[idcontrolgalpon].data[mesAnioKey].total,
                    mortalidadpollos: datosAgrupados[idcontrolgalpon].data[mesAnioKey].mortalidadpollos
                }))
            }));
        };

        const datosMensualesPorControl = agruparDatosPorMesYControl(comprasNormales);

        const labels = datosMensualesPorControl.map(entry => entry.idcontrolgalpon);
        const graph = document.querySelector("#grafica");

        const datasets = datosMensualesPorControl.map(entry => ({
            label: `Total de Pollos - ${entry.idcontrolgalpon}`,
            data: entry.datosMensuales.map(data => data.total),
            borderColor: entry.color,
            fill: false
        }));

        const mortalidadDatasets = datosMensualesPorControl.map(entry => ({
            label: `Mortalidad de Pollos - ${entry.idcontrolgalpon}`,
            data: entry.datosMensuales.map(data => data.mortalidadpollos),
            borderColor: entry.color,
            fill: false
        }));

        const chartConfig = {
            type: 'line',
            data: {
                labels: labels,
                datasets: [...datasets, ...mortalidadDatasets]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        suggestedMin: 0,
                        suggestedMax: 2000,
                        ticks: {
                            stepSize: 500,
                            callback: value => `${value.toFixed(2)}`
                        },
                        title: {
                            display: true,
                            text: 'Total por Galpon',
                            font: {
                                size: 17,
                                weight: 'bold'
                            }
                        }
                    }
                }
            }
        };

        new Chart(graph, chartConfig);

        function getRandomColor() {
            const letters = '0123456789ABCDEF';
            let color = '#';
            for (let i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }

        const datosDesdeBD1 = [
  <% galpon.forEach(function (controlgalpon) { %>
        {
            fecha: '<%= controlgalpon.fechallegada %>',
            total: <%= controlgalpon.cantidadpollo %>,
            mortalidadpollos: <%= controlgalpon.mortalidadpollos %>,
            nombregalpon: '<%= controlgalpon.nombregalpon %>'
        },
  <% }) %>
];

        const comprasNormales1 = datosDesdeBD1.filter(controlgalpon => controlgalpon.estadocontrolgalpon = 1);

        const agruparDatosPorMes1 = (comprasNormales) => {
            const datosAgrupados = {};

            comprasNormales.forEach(entry => {
                const fecha = new Date(entry.fecha);
                const mesAnioKey = `${fecha.getMonth() + 1}-${fecha.getFullYear()}`;

                datosAgrupados[mesAnioKey] = (datosAgrupados[mesAnioKey] || { total: 0, mortalidadpollos: 0 });

                datosAgrupados[mesAnioKey].total += entry.total;
                datosAgrupados[mesAnioKey].mortalidadpollos += entry.mortalidadpollos;
            });

            return Object.keys(datosAgrupados).map(mesAnioKey => ({
                mesAnio: mesAnioKey,
                total: datosAgrupados[mesAnioKey].total,
                mortalidadpollos: datosAgrupados[mesAnioKey].mortalidadpollos
            }));
        };

        const datosMensualesNormales = agruparDatosPorMes1(comprasNormales1);
        const labels1 = datosMensualesNormales.map(entry => entry.mesAnio);
        const graph1 = document.querySelector("#grafica1");

        const borderColorNormal1 = 'rgba(0, 0, 255, 1)';
        const borderColorMortalidad1 = 'rgba(255, 0, 0, 1)';

        const chartConfig1 = {
            type: 'line',
            data: {
                labels: labels1,
                datasets: [
                    {
                        label: "Total de Pollos Mensuales",
                        data: datosMensualesNormales.map(entry => entry.total),
                        borderColor: borderColorNormal1,
                        fill: false
                    },
                    {
                        label: "Mortalidad de Pollos Mensual",
                        data: datosMensualesNormales.map(entry => entry.mortalidadpollos),
                        borderColor: borderColorMortalidad1,
                        fill: false
                    }
                ]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        suggestedMin: 0,
                        suggestedMax: 2000,
                        ticks: {
                            stepSize: 500,
                            callback: value => `${value.toFixed(2)}`
                        },
                        title: {
                            display: true,
                            text: 'Total de Pollos',
                            font: {
                                size: 17,
                                weight: 'bold'
                            }
                        }
                    }
                }
            }
        };

        new Chart(graph1, chartConfig1);

    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            ordenarTablaPorIdProductosDescendente();
        });

        function ordenarTablaPorIdProductosDescendente() {
            var tabla = document.getElementById("tablaResultados");
            var filas = Array.from(tabla.getElementsByTagName("tr")).slice(1);

            filas.sort(function (a, b) {
                var idProductoA = parseInt(a.cells[0].innerText);
                var idProductoB = parseInt(b.cells[0].innerText);
                return idProductoB - idProductoA;
            });

            filas.forEach(function (fila) {
                tabla.tBodies[0].appendChild(fila);
            });
        }
    </script>
    <script>


        //



        //PARA BUSCAR EN MI TABLA
        const campoBusqueda = document.getElementById('busqueda');
        const filasTabla = document.querySelectorAll('tbody tr');

        campoBusqueda.addEventListener('input', function () {
            const consulta = campoBusqueda.value.toLowerCase();
            filasTabla.forEach(function (fila) {
                const contenidoFila = fila.textContent.toLowerCase();
                if (contenidoFila.includes(consulta)) {
                    fila.style.display = 'table-row';
                } else {
                    fila.style.display = 'none';
                }
            });
        });


        //

        document.addEventListener("DOMContentLoaded", function () {
            var comprasTable = document.getElementById("tablaResultados");
            var selectOption = document.getElementById("selectOption");
            var pagination = document.querySelector(".pagination");

            function updateTable() {
                var itemsPerPage = parseInt(selectOption.value);
                var rows = comprasTable.tBodies[0].rows;
                var pageCount = Math.ceil(rows.length / itemsPerPage);
                showPage(1);
                updatePagination(pageCount);
            }

            function showPage(pageNumber) {
                var itemsPerPage = parseInt(selectOption.value);
                var rows = comprasTable.tBodies[0].rows;

                for (var i = 0; i < rows.length; i++) {
                    rows[i].style.display = "none";
                }

                var startIndex = (pageNumber - 1) * itemsPerPage;
                var endIndex = startIndex + itemsPerPage;
                for (var i = startIndex; i < endIndex && i < rows.length; i++) {
                    rows[i].style.display = "";
                }

                currentPage = pageNumber;
            }

            function updatePagination(pageCount) {
                pagination.innerHTML = "";

                var previousButton = createPaginationButton("Atras", function () {
                    if (currentPage > 1) {
                        showPage(currentPage - 1);
                    }
                });
                pagination.appendChild(previousButton);

                for (var i = 1; i <= pageCount; i++) {
                    var pageButton = createPaginationButton(i, function () {
                        showPage(this.textContent);
                    });
                    pagination.appendChild(pageButton);
                }

                var nextButton = createPaginationButton("Siguiente", function () {
                    if (currentPage < pageCount) {
                        showPage(currentPage + 1);
                    }
                });
                pagination.appendChild(nextButton);
            }

            function createPaginationButton(text, clickHandler) {
                var button = document.createElement("li");
                button.classList.add("page-item");
                var link = document.createElement("a");
                link.classList.add("page-link");
                link.textContent = text;
                link.href = "#";
                link.addEventListener("click", clickHandler);
                button.appendChild(link);
                return button;
            }

            updateTable();
            var currentPage = 1;

            selectOption.addEventListener("change", function () {
                currentPage = 1;
                updateTable();
            });
        });

    </script>

    <!-- Bootstrap core JavaScript-->
    <script src="/src/boostrapdiseñoadmin/vendor/jquery/jquery.min.js"></script>
    <script src="/src/boostrapdiseñoadmin/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

    <!-- Core plugin JavaScript-->
    <script src="/src/boostrapdiseñoadmin/vendor/jquery-easing/jquery.easing.min.js"></script>

    <!-- Custom scripts for all pages-->
    <script src="/src/boostrapdiseñoadmin/js/sb-admin-2.min.js"></script>
    <!-- SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10.16.6/dist/sweetalert2.min.js"></script>
    <script lang="javascript" src="dist/xlsx.core.min.js"></script>

</body>

</html>